/** * Create by LDY 2019/7/3.<br> */function VCrtcSerive() {    var VCrtcSeriveSelf = this;    VCrtcSeriveSelf.participants = {};//参会者集合    VCrtcSeriveSelf.videoStream;    VCrtcSeriveSelf.audioStream;    VCrtcSeriveSelf.localStream;    VCrtcSeriveSelf.mcuHost; //会中mcu host    VCrtcSeriveSelf.alias; //会议号码    VCrtcSeriveSelf.pwd; //会议室密码    VCrtcSeriveSelf.conferenceId; //会见ID    VCrtcSeriveSelf.selfUUid; //监控者自己的ID    VCrtcSeriveSelf.displayName = "anonymous_mork";    VCrtcSeriveSelf.microphoneMuted;//本地麦克风是否静止    VCrtcSeriveSelf.VCrtcSeriveSelf.vcrtc = new ZjRTC();    VCrtcSeriveSelf.vcrtc.clayout = "4:4";    VCrtcSeriveSelf.vcrtc.simulcast = false;//开启多流模式    VCrtcSeriveSelf.vcrtc.isShiTong = false;//是否开启专属云引擎 如果为true simulcast 必须为true；    //监控入会    VCrtcSerive.prototype.enterConference = function (mcuHost, alias, pwd) {        VCrtcSeriveSelf.mcuHost = mcuHost;        VCrtcSeriveSelf.alias = alias;        VCrtcSeriveSelf.pwd = pwd;        VCrtcSeriveSelf.vcrtc.pin = password;        VCrtcSeriveSelf.vcrtc.makeCall(mcuHost, alias, displayName, null, 'video');    }    VCrtcSeriveSelf.vcrtc.onSetup = function (stream, pinStatus, conferenceExtension) {        $timeout(function () {            $log.debug('ZjRTC.onSetup', stream, pinStatus, conferenceExtension);            if (stream) {                VCrtcSeriveSelf.localStream = stream;            }            VCrtcSeriveSelf.microphoneMuted = VCrtcSeriveSelf.vcrtc.muteAudio(true);            VCrtcSeriveSelf.vcrtc.connect(pin, extension);        });    };    VCrtcSeriveSelf.vcrtc.onConnect = function (stream, uuid) {        //监控人入会以后，即可发送自己静音，并且邀请两端入会        VCrtcSeriveSelf.selfUUid = VCrtcSeriveSelf.vcrtc.uuid;        //2、监控进会以后 给自己静画取消延时        VCrtcSeriveSelf.vcrtc.setParticipantVideoMute(VCrtcSeriveSelf.vcrtc.uuid, "hard_vmute");        VCrtcSeriveSelf.vcrtc.setParticipantDelayPlay(VCrtcSeriveSelf.vcrtc.uuid, "cancel_delay");        if (VCrtcSeriveSelf.vcrtc.call_type === 'video' || VCrtcSeriveSelf.vcrtc.call_type == 'recvonly') {            VCrtcSeriveSelf.videoStream = stream;            VCrtcSeriveSelf.audioStream = stream;        }    };    //获取与会人列表    VCrtcSeriveSelf.vcrtc.onParticipantCreate = function (data) {        console.log('call::onParticipantCreate');        let newPartcipant = _this.parseParticipant(data);        $timeout(_this.updatepartcipant(newPartcipant), 100, false);    };    VCrtcSeriveSelf.vcrtc.onParticipantUpdate = function (data) {        console.log('call::participantUpdate');        let updatePartcipant = _this.parseParticipant(data);        $timeout(_this.updatepartcipant(updatePartcipant), 100, false);    };    VCrtcSeriveSelf.vcrtc.onParticipantDelete = function (data) {        console.log('call::participantDeleted::'+ data.uuid);        delete VCrtcSeriveSelf.participants[data.uuid];    };}