/** * Create by LDY 2019/7/3.<br> */function VCrtcSerive() {    var VCrtcSeriveSelf = this;    VCrtcSeriveSelf.apiService = "cs.lalonline.cn";    VCrtcSeriveSelf.participants = {};//参会者集合    VCrtcSeriveSelf.videoStream;//远端视频流    VCrtcSeriveSelf.audioStream;//远端音频流    VCrtcSeriveSelf.localStream;    VCrtcSeriveSelf.mcuHost; //会中mcu host    VCrtcSeriveSelf.alias; //会议号码    VCrtcSeriveSelf.pwd; //会议室密码    VCrtcSeriveSelf.conferenceId; //会见ID    VCrtcSeriveSelf.selfUUid; //监控者自己的ID    VCrtcSeriveSelf.displayName = "anonymous_mork";    VCrtcSeriveSelf.microphoneMuted;//本地麦克风是否静止    VCrtcSeriveSelf.vcrtc = new ZjRTC();    VCrtcSeriveSelf.vcrtc.clayout = "4:4";    VCrtcSeriveSelf.vcrtc.simulcast = false;//开启多流模式    VCrtcSeriveSelf.vcrtc.isShiTong = false;//是否开启专属云引擎 如果为true simulcast 必须为true；    VCrtcSeriveSelf.isOpenFilter = false;//是否开启过滤    VCrtcSeriveSelf.isOpenInterposeByone = false;//是否开启插话 插某一个人    VCrtcSeriveSelf.isOpenInterposeByAll = false;//是否开启插所有    VCrtcSeriveSelf.isStopConference = false;//是否中断会议    VCrtcSeriveSelf.returnMsg_200 = "success";    VCrtcSeriveSelf.returnMsgcode_200 = 200;    VCrtcSeriveSelf.returnMsg_500 = "fail";    VCrtcSeriveSelf.returnMsgcode_500 = 500;    VCrtcSeriveSelf.updatepartcipant = function (partcipant) {        if (partcipant.uuid in VCrtcSeriveSelf.participants) {            VCrtcSeriveSelf.participants[partcipant.uuid] = partcipant;        } else {            if (partcipant.displayName.indexOf('anonymous') === -1) {                VCrtcSeriveSelf.participants[partcipant.uuid] = partcipant;            }        }    }    VCrtcSeriveSelf.parseParticipant = function (data) {        function yesToBoolean(yes) {            return yes === 'YES' ? true : false;        }        function allowToBoolean(allow) {            return allow === 'ALLOW' ? true : false;        }        let participant = {            apiUrl: data.api_url,            displayName: data.display_name || data.uri.replace('sip:', ''),            hasMedia: data.has_media,            overlayText: data.overlay_text,            role: data.is_external ? 'external' : data.role,            serviceType: data.service_type,            spotlight: data.spotlight,            startTime: data.start_time * 1000 || Date.now(),            protocol: data.protocol,            vendor: data.vendor,            uri: data.uri,            uuid: data.uuid,            isVideo: yesToBoolean(data.is_video_call),            isChair: data.role === 'chair',            isWaiting: data.service_type === 'waiting_room',            isConnected: data.service_type === 'conference' || data.service_type === 'lecture',            isConnecting: data.service_type === 'connecting',            isStreaming: data.is_streaming_conference,            isMuted: yesToBoolean(data.is_muted),            isPresenting: yesToBoolean(data.is_presenting),            isPresentationSupported: yesToBoolean(data.presentation_supported),            isFeccSupported: yesToBoolean(data.fecc_supported),            isRxPresentation: allowToBoolean(data.rx_presentation_policy),            isExternal: data.is_external,            delay_time: data.delay_time,            isEarMuted: yesToBoolean(data.ear_muted),            ishardVmute: data.v_muted > 0 ? true : false        };        if (data.is_speaking !== undefined) {            participant['vad'] = data.is_speaking === "YES" ? 100 : 0;        }        if (this.selfUUid == participant.uuid) {            participant.isSelf = true;        }        return participant;    };//    VCrtcSeriveSelf.vcrtc.onSetup = function (stream, pinStatus, conferenceExtension) {        setTimeout(function () {            if (stream) {                VCrtcSeriveSelf.localStream = stream;            }            VCrtcSeriveSelf.vcrtc.connect(this.pwd, conferenceExtension);        });    };    VCrtcSeriveSelf.vcrtc.onConnect = function (stream, uuid) {        //监控人入会以后，即可发送自己静音，并且邀请两端入会        VCrtcSeriveSelf.selfUUid = VCrtcSeriveSelf.vcrtc.uuid;        //2、监控进会以后 给自己静画取消延时        VCrtcSeriveSelf.vcrtc.setParticipantMute(VCrtcSeriveSelf.vcrtc.uuid, "mute");        VCrtcSeriveSelf.vcrtc.setParticipantVideoMute(VCrtcSeriveSelf.vcrtc.uuid, "hard_vmute");        if (VCrtcSeriveSelf.vcrtc.call_type === 'video' || VCrtcSeriveSelf.vcrtc.call_type == 'recvonly') {            VCrtcSeriveSelf.videoStream = stream;            VCrtcSeriveSelf.audioStream = stream;        }        setTimeout(function () {            VCrtcSeriveSelf.vcrtc.setParticipantDelayPlay(VCrtcSeriveSelf.vcrtc.uuid, "cancel_delay");        }, 4000);    };//获取与会人列表    VCrtcSeriveSelf.vcrtc.onParticipantCreate = function (data) {        console.log('call::onParticipantCreate');        let newPartcipant = VCrtcSeriveSelf.parseParticipant(data);        setTimeout(function () {            VCrtcSeriveSelf.updatepartcipant(newPartcipant);        }, 100);    };    VCrtcSeriveSelf.vcrtc.onParticipantUpdate = function (data) {        console.log('call::participantUpdate');        let updatePartcipant = VCrtcSeriveSelf.parseParticipant(data);        setTimeout(function () {            VCrtcSeriveSelf.updatepartcipant(updatePartcipant);        }, 100);    };    VCrtcSeriveSelf.vcrtc.onParticipantDelete = function (data) {        console.log('call::participantDeleted::' + data.uuid);        delete VCrtcSeriveSelf.participants[data.uuid];    };    VCrtcSeriveSelf.vcrtc.onDisconnect = function (data) {        console.log("conference is idsconnect...");        VCrtcSeriveSelf.videoStream = null;//远端视频流        VCrtcSeriveSelf.audioStream = null;//远端音频流        VCrtcSeriveSelf.participants = {};        window.postMessage({type: 'diconnect', data: data}, '*');    }    VCrtcSeriveSelf.vcrtc.onError = function (msg) {        console.log(msg);        window.postMessage({type: 'Exception', data: msg, code: 500}, '*');    }}//监控入会VCrtcSerive.prototype.enterConference = function (conferenceId) {    let _this = this;    //掉用接口查询    let request = "/meeting_room/get_meetingroom/" + conferenceId;    _this.sendRequest(request, null, function (msg) {            try {                let resData = JSON.parse(msg.currentTarget.response);                if (resData.code == 200) {                    _this.pwd = resData.data.aipKey;                    _this.mcuHost = resData.data.mcuHost;                    _this.guestPassword = resData.data.guestPassword;                    _this.alias = resData.data.meetid;                    _this.vcrtc.pin = _this.pwd;                    _this.vcrtc.makeCall(_this.mcuHost, _this.alias, _this.displayName, null, 'video');                } else {                    console.debug("sendRequest resData response code is not 200");                    window.postMessage({type: 'Exception', data: "API get_meetingroom error", code: 40001}, '*');                }            } catch (err) {                console.error("sendRequest resData is error:" + err);                window.postMessage({type: 'Exception', data: err, code: 40001}, '*');            }        }    );}//监控退会VCrtcSerive.prototype.exitConference = function () {    var _this = this;    //关闭过滤    this.closeFilterOne();    //恢复会议室    this.recorveConfrence();    //结束插话    this.endChimedMio();    setTimeout(function () {        _this.vcrtc.disconnect();    }, 500);    this.participants = {};}//开始插话VCrtcSerive.prototype.startChimedMio = function (conferenceId, alais) {    let _this = this;    // this.vcrtc.addCall("audio");    let participants = this.participants;    //当uuid不传即插话双方    //给自己取消静音    _this.vcrtc.setParticipantMute(this.selfUUid);    if (alais) {        //插话某一方的uuid        let appointUUid = _this.seachTerminalMsg(alais);        //分别将会见双方静画（不让别人看到）、静音（不让别人听到）。        _this.vcrtc.setMuteAllGuests(true);        for (let uuid in participants) {            if (participants[uuid].isSelf || participants[uuid].isChair) {                continue;            }            //将对方闭耳            if (uuid != appointUUid) {                //让对方听不到                _this.vcrtc.setParticipantMutear(uuid, true);            } else {                _this.vcrtc.setParticipantMutear(uuid);            }            //双方禁画            _this.vcrtc.setParticipantVideoMute(uuid, "hard_vmute");            //取消延时            if (participants[uuid].delay_time > 0) {                _this.vcrtc.setParticipantDelayPlay(uuid, "cancel_delay");            }            //end 会见双方 互相听不到对方声音、看不到对方画面 完成        }    } else {        //插话双方        //1取消双方延时        for (let uuid in participants) {            if (participants[uuid].isSelf || participants[uuid].isChair) {                continue;            }            //插话            if (participants[uuid].delay_time > 0) {                _this.vcrtc.setParticipantDelayPlay(uuid, "cancel_delay");            }        }    }};//结束插话VCrtcSerive.prototype.endChimedMio = function (conferenceId, alais) {    let _this = this;    let participants = this.participants;    //当uuid不传即插话双方    //给自己取消静音    this.vcrtc.setParticipantMute(this.selfUUid, "mute");    if (alais) {        //插话某一方        //插话某一方的uuid        let appointUUid = _this.seachTerminalMsg(alais);        //分别将会见取消双方静画（取消）、静音（取消）。        _this.vcrtc.setMuteAllGuests(false);        for (let uuid in participants) {            if (participants[uuid].isSelf || participants[uuid].isChair) {                continue;            }            //将取消闭音            if (!participants[uuid].isEarMuted) {                _this.vcrtc.setParticipantMutear(uuid);            }            //取消禁画            _this.vcrtc.setParticipantVideoMute(uuid);            //恢复延时            this.vcrtc.setParticipantDelayPlay(uuid);        }    } else {        //取消双方插话        for (let uuid in participants) {            if (participants[uuid].isSelf || participants[uuid].isChair) {                continue;            }            //恢复延时            this.vcrtc.setParticipantDelayPlay(uuid);        }    }};VCrtcSerive.prototype.seachTerminalMsg = function (terminalId) {    let _this = this;    let request = "/meeting_user/terminal_uuid/" + terminalId;    let terminalUUid = "";    let msg = _this.sendRequest(request, null, false);    if (msg.code == 200) {        return msg.data;    } else {        console.debug("seachTerminalMsg by one is fail.");        return "";    }}//中断会议VCrtcSerive.prototype.stopConfrence = function () {    //暂停    let participants = this.participants;    this.vcrtc.setMuteAllGuests(true);    for (let uuid in participants) {        if (participants[uuid].isSelf || participants[uuid].isChair) {            continue;        }        this.vcrtc.setParticipantVideoMute(uuid, "hard_vmute");    }};//会议恢复VCrtcSerive.prototype.recorveConfrence = function () {    let participants = this.participants;    //暂停    this.vcrtc.setMuteAllGuests(false);    for (let uuid in participants) {        if (participants[uuid].isSelf || participants[uuid].isChair) {            continue;        }        //取消禁画        this.vcrtc.setParticipantVideoMute(uuid);    }};//开启过滤VCrtcSerive.prototype.openFilterOne = function () {    let _this = this;    let participants = this.participants;    //全体访客静音    try {        for (let uuid in participants) {            if (participants[uuid].isSelf || participants[uuid].isChair) {                continue;            }            //闭音            this.vcrtc.setParticipantMutear(uuid, "mutear");            //禁画            // this.vcrtc.setParticipantVideoMute(uuid,true);            //取消延时            setTimeout(function () {                _this.vcrtc.setParticipantDelayPlay(uuid, "cancel_delay");            }, 2000);        }        window.postMessage({type: 'apiMsg_filter', data: this.returnMsg_200, code: this.returnMsgcode_200}, '*');        this.isOpenFilter = true;    } catch (error) {        console.debug(error);        window.postMessage({type: 'apiMsg_filter', data: this.returnMsg_500, code: this.returnMsgcode_500}, '*');    }}//关闭过滤VCrtcSerive.prototype.closeFilterOne = function () {    let participants = this.participants;    //全体访客取消    try {        this.vcrtc.setMuteAllGuests(false);        for (let uuid in participants) {            if (participants[uuid].isSelf || participants[uuid].isChair) {                continue;            }            //恢复延时            this.vcrtc.setParticipantDelayPlay(uuid);            //关闭闭音            this.vcrtc.setParticipantMutear(uuid);        }        this.isOpenFilter = false;    } catch (error) {    }}VCrtcSerive.prototype.sendRequest = function (request, params, cb, retries) {    var self = this;    // Only do async if explicitly asked    var async = cb === false ? false : true;    var xhr = new XMLHttpRequest();    var xhrUrl = "https://" + self.apiService + request;    xhr.open("GET", xhrUrl, async);    if (cb) {        xhr.onload = cb;    }    if (retries === undefined) {        retries = 0;    }    xhr.onerror = function () {        if (++retries > 10 || cb === false) {            console.log("onerror........");        } else {            setTimeout(function () {                self.sendRequest(request, params, cb, retries);            }, retries * 500);        }    };    xhr.ontimeout = function () {        if (++retries > 10 || cb === false) {            console.log("ontimeout........");        } else {            setTimeout(function () {                self.sendRequest(request, params, cb, retries);            }, retries * 500);        }    };    if (params) {        xhr.setRequestHeader('Content-type', 'application/json');        xhr.send(JSON.stringify(params));    } else {        xhr.send();    }    if (cb === false) {        var msg = {};        try {            msg = JSON.parse(xhr.responseText);        } catch (error) {            msg.reason = xhr.status + " " + xhr.statusText;        }        msg.http_status = xhr.status;        return msg;    }};